print(c(b, h.sc$density[b]))
# exact value
dnorm(12,12,6)
# both values are close to the exact value
set.seed(42)
x <- rnorm(100, 12, 6)
sc <- function(x){
n <- length(x)
h <- 3.5 * sd(x) * n^(-1/3)
nclass <- ceiling(diff(range(x)) / h)
breaks <- min(x) + h * 0:nclass
return(list(nclass = nclass, h = h, breaks = breaks))
}
h.sc <- hist(x, breaks = sc(x)$breaks, freq = FALSE, main = "Scott's Rule", col = "lightblue3")
z <- seq(min(x) - sc(x)$h, max(x) +  sc(x)$h, 0.01)
lines(z, dnorm(z, 12, 6), col = "darkblue", lwd = 3)
x0 <- 12
b <- which.min(h.sc$breaks <= x0) - 1
print(c(b, h.sc$density[b]))
# exact value
dnorm(12,12,6)
# both values are close to the exact value
set.seed(42)
x <- rnorm(100, 12, 6)
Freed <- function(x){
n <- length(x)
h <- 2 * IQR(x) * n^(-1/3)
nclass <- ceiling(diff(range(x)) / h)
breaks <- min(x) + h * 0:nclass
return(list(nclass = nclass, h = h, breaks = breaks))
}
h.Freed <- hist(x, breaks = Freed(x)$breaks, freq = FALSE, main = "Freedman-Diaconis Rule", col = "lightblue3")
z <- seq(min(x) - Freed(x)$h, max(x) +  Freed(x)$h, 0.01)
lines(z, dnorm(z, 12, 6), col = "darkblue", lwd = 3)
x0 <- 12
b <- which.min(h.Freed$breaks <= x0) - 1
print(c(b, h.Freed$density[b]))
# exact value
dnorm(12,10,5)
# both values are close to the exact value
set.seed(42)
x <- rnorm(100, 12, 6)
Freed <- function(x){
n <- length(x)
h <- 2 * IQR(x) * n^(-1/3)
nclass <- ceiling(diff(range(x)) / h)
breaks <- min(x) + h * 0:nclass
return(list(nclass = nclass, h = h, breaks = breaks))
}
h.Freed <- hist(x, breaks = Freed(x)$breaks, freq = FALSE, main = "Freedman-Diaconis Rule", col = "lightblue3")
z <- seq(min(x) - Freed(x)$h, max(x) +  Freed(x)$h, 0.01)
lines(z, dnorm(z, 12, 6), col = "darkblue", lwd = 3)
x0 <- 12
b <- which.min(h.Freed$breaks <= x0) - 1
print(c(b, h.Freed$density[b]))
# exact value
dnorm(12, 12, 6)
# both values are close to the exact value
set.seed(42)
x <- rnorm(100, 12, 6)
Freed <- function(x){
n <- length(x)
h <- 2 * IQR(x) * n^(-1/3)
nclass <- ceiling(diff(range(x)) / h)
breaks <- min(x) + h * 0:nclass
return(list(nclass = nclass, h = h, breaks = breaks))
}
h.Freed <- hist(x, breaks = Freed(x)$breaks, freq = FALSE, main = "Freedman-Diaconis Rule", col = "lightblue3")
z <- seq(min(x) - Freed(x)$h, max(x) +  Freed(x)$h, 0.01)
lines(z, dnorm(z, 12, 6), col = "darkblue", lwd = 3)
x0 <- 12
b <- which.min(h.Freed$breaks <= x0) - 1
print(c(b, h.Freed$density[b]))
# exact value
dnorm(12, 12, 6)
# both values are close to the exact value
Run <- seq(1:24)
dt <- data.frame()
Run <- seq(1:24)
sweetnessIndex <- c(5.2, 5.5, 6.0, 5.9, 5.8, 6.0, 5.8, 5.6, 5.6, 5.9, 5.4, 5.6, 5.8, 5.5, 5.3, 5.3, 5.7, 5.5, 5.7,
5.3, 5.9, 5.8, 5.8, 5.9)
dt <- data.frame()
Run <- seq(1:24)
sweetnessIndex <- c(5.2, 5.5, 6.0, 5.9, 5.8, 6.0, 5.8, 5.6, 5.6, 5.9, 5.4, 5.6, 5.8, 5.5, 5.3, 5.3, 5.7, 5.5, 5.7,
5.3, 5.9, 5.8, 5.8, 5.9)
pectinPpm <- c(220, 227, 259, 210, 224, 215, 231, 268, 239, 212, 410, 256, 306, 259, 284, 383, 271, 264 ,227, 263,
232, 220, 246, 241)
dt <- data.frame()
Run <- seq(1:24)
sweetnessIndex <- c(5.2, 5.5, 6.0, 5.9, 5.8, 6.0, 5.8, 5.6, 5.6, 5.9, 5.4, 5.6, 5.8, 5.5, 5.3, 5.3, 5.7, 5.5, 5.7,
5.3, 5.9, 5.8, 5.8, 5.9)
pectinPpm <- c(220, 227, 259, 210, 224, 215, 231, 268, 239, 212, 410, 256, 306, 259, 284, 383, 271, 264 ,227, 263,
232, 220, 246, 241)
dt <- data.frame(c(Run, sweetnessIndex, pectinPpm))
dt
dt <- data.frame(Run, sweetnessIndex, pectinPpm)
Run <- seq(1:24)
sweetnessIndex <- c(5.2, 5.5, 6.0, 5.9, 5.8, 6.0, 5.8, 5.6, 5.6, 5.9, 5.4, 5.6, 5.8, 5.5, 5.3, 5.3, 5.7, 5.5, 5.7,
5.3, 5.9, 5.8, 5.8, 5.9)
pectinPpm <- c(220, 227, 259, 210, 224, 215, 231, 268, 239, 212, 410, 256, 306, 259, 284, 383, 271, 264 ,227, 263,
232, 220, 246, 241)
Run <- seq(1:24)
sweetnessIndex <- c(5.2, 5.5, 6.0, 5.9, 5.8, 6.0, 5.8, 5.6, 5.6, 5.9, 5.4, 5.6, 5.8, 5.5, 5.3, 5.3, 5.7, 5.5, 5.7,
5.3, 5.9, 5.8, 5.8, 5.9)
pectinPpm <- c(220, 227, 259, 210, 224, 215, 231, 268, 239, 212, 410, 256, 306, 259, 284, 383, 271, 264 ,227, 263,
232, 220, 246, 241)
dt <- data.frame(Run, sweetnessIndex, pectinPpm)
fit <- lm(sweetnessIndex ~ pectinPpm)
fit <- lm(sweetnessIndex ~ pectinPpm)
summary(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(pectinPpm, sweetnessIndex)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(pectinPpm, sweetnessIndex)
abline(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(pectinPpm, sweetnessIndex)
abline(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(pectinPpm, sweetnessIndex)
abline(fit)
plot(dt)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(fit, 2)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(fit, c(1, 2))
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
plot(fit, c(1, 2))
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
abline()
plot(fit, c(1, 2))
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
hist(sweetnessIndex, pectinPpm)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
hist(dt)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
plot(fit, c(1, 2))
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
plot(fit, c(1, 2))
library(equatiomatic)
install.packages("equatiomatic")
install.packages("equatiomatic")
library(equatiomatic)
equmatiomatic::extract_eq(fit)
equmatiomatic::extract_eq(fit)
extract_eq(fit)
plot(sweetnessIndex, pectinPpm)
abline(fit)
plot(sweetnessIndex, pectinPpm)
abline(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
plot(fit, c(1, 2))
plot(sweetnessIndex, pectinPpm)
abline(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
abline(fit)
plot(fit, c(1, 2))
plot(sweetnessIndex, pectinPpm)
abline(fit)
plot(sweetnessIndex, pectinPpm, pch = 16)
abline(fit)
plot(sweetnessIndex, pectinPpm, pch = 16)
abline(fit)
plot(sweetnessIndex, pectinPpm, pch = 16)
plot(sweetnessIndex, pectinPpm, pch = 16)
abline(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
Run <- seq(1:24)
sweetnessIndex <- c(5.2, 5.5, 6.0, 5.9, 5.8, 6.0, 5.8, 5.6, 5.6, 5.9, 5.4, 5.6, 5.8, 5.5, 5.3, 5.3, 5.7, 5.5, 5.7,
5.3, 5.9, 5.8, 5.8, 5.9)
pectinPpm <- c(220, 227, 259, 210, 224, 215, 231, 268, 239, 212, 410, 256, 306, 259, 284, 383, 271, 264 ,227, 263,
232, 220, 246, 241)
dt <- data.frame(Run, sweetnessIndex, pectinPpm)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(sweetnessIndex, pectinPpm)
plot(fit, c(1, 2))
plot(sweetnessIndex, pectinPpm, pch = 16)
abline(fit)
plot(pectinPpm, sweetnessIndex, pch = 16)
abline(fit)
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(pectinPpm, sweetnessIndex)
plot(fit, c(1, 2))
fit <- lm(sweetnessIndex ~ pectinPpm, dt)
summary(fit)
plot(fit, c(1, 2))
plot(pectinPpm, sweetnessIndex, pch = 16)
abline(fit)
summary(fit)
summary(fit)
confint(fit, level = 0.95)
summary(fit)
confint(fit, level = 0.95)
cor(dt$pectinPpm, dt$sweetnessIndex)
anova(fit)
predict(fit, 10)
predict(fit)
predict(fit, as.data.frame(300))
predict(fit, data.frame(pectinPpm = 300))
table(c(50,30,60), c(40,30,40))
table(50, 30, 60, 40, 30, 40)
table(c(50, 30, 60, 40, 30, 40))
table(2,3,c(1,2,3,4,5,6))
table(2,3,c(1,2,3,4,5,6))
data.frame(c("Mechanical", "Electrical", "Other"), c("Desing1", "Desing2"))
data.frame(c("Mechanical", "Electrical", "Other"), c("Desing1", "Desing2"))
data.frame(3,2,c("Mechanical", "Electrical", "Other"), c("Desing1", "Desing2"))
data.frame(2,3,c("Mechanical", "Electrical", "Other"), c("Desing1", "Desing2"))
data.frame(row.names = c("Desing1", "Desing2"), c("Mechanical", "Electrical", "Other"))
data.frame(row.names = c("Desing1", "Desing2"))
table(data.frame(row.names = c("Desing1", "Desing2")))
data.frame(2,3, c(1,2,3,4,5,6), row.names = c("Desing1", "Desing2"))
data.frame(c(1,2,3,4,5,6), row.names = c("Desing1", "Desing2"))
data.frame(nrow = 2, ncol = 3, c(1,2,3,4,5,6), row.names = c("Desing1", "Desing2"))
data.frame(nrow = 2, ncol = 3, row.names = c("Desing1", "Desing2"))
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
data.frame(Mechanical, Electrical, nrow = 2, ncol = 3, row.names = c("Desing1", "Desing2"))
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
table(data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2")))
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
df <- data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
table(df)
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
df <- data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
table(Mechanical, Electrical, Other)
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
df <- data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
as.table(Mechanical, Electrical, Other)
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
df <- data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
as.table(df)
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
df <- data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
df
Mechanical = c(50, 40)
Electrical = c(30, 30)
Other = c(60, 40)
df <- data.frame(Mechanical, Electrical, Other, row.names = c("Desing1", "Desing2"))
chisq.test(df)
onc <- matrix(nrow = 2, ncol = 2, byrow=TRUE)
colnames(smoke) <- c("High","Low","Middle")
onc
onc <- matrix(nrow = 2, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed")
onc <- as.table(smoke)
onc <- matrix(nrow = 2, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed")
onc <- as.table(onc)
onc
onc <- matrix(c(64, 166, 136, 134), nrow = 2, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed")
onc <- as.table(onc)
onc
onc <- matrix(c(64, 136, 166, 134), nrow = 2, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed")
onc <- as.table(onc)
onc
onc <- matrix(c(64, 136, 166, 134), nrow = 3, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed")
onc <- matrix(c(64, 136, 166, 134), nrow = 2, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed")
onc <- as.table(onc)
onc
onc <- matrix(c(64, 136, 166, 134), nrow = 3, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed", "Total")
onc <- as.table(onc)
onc
onc <- matrix(c(64, 136, 166, 134, 230, 270), nrow = 3, ncol = 2, byrow=TRUE)
colnames(onc) <- c("Case", "Control")
rownames(onc) <- c("Exposed", "Unexposed", "Total")
onc <- as.table(onc)
onc
onc <- matrix(c(64, 136, 200, 166, 134, 300, 230, 270, 500), nrow = 3, ncol = 3, byrow=TRUE)
colnames(onc) <- c("Case", "Control", "Total")
rownames(onc) <- c("Exposed", "Unexposed", "Total")
onc <- as.table(onc)
onc
(64/200)/(136/200)
(64/200)/(136/200)
64/136
(64/136) / (166 / 134)
(64/136) / (166 / 134)
(166 / 134) / (64/136)
setwd("~/Desktop/STAT250PROJECT")
data <- read.csv("dataset3/dataset3.csv")
head(data)
data
head(data)
str(data)
setwd("~/Desktop/STAT250PROJECT")
data <- read.csv("dataset3/dataset3.csv")
str(data)
#changing the structure of the variables
data$day <- as.character(data$day)
data$gender <- as.factor(data$gender)
data$surgical <- as.factor(data$surgical)
str(data)
fit1 <- lm(Satisfaction ~ ., data)
summary(fit1)
str(data)
summary(fit1)
data <- read.csv("dataset3/dataset3.csv")
fit1 <- lm(Satisfaction ~ ., data)
#changing the structure of the variables
#data$day <- as.character(data$day)
data$gender <- as.factor(data$gender)
data$surgical <- as.factor(data$surgical)
fit1 <- lm(Satisfaction ~ ., data)
summary(fit1)
data
fit1 <- lm(Satisfaction ~ ., data)
summary(fit1)
data
summary(fit1)
# check for multicollinearity
car::vif(fit1)
# plot residual vs fitted and normal q-q
par(mfrow=c(1,2))
plot(fit1, c(1,2))
summary(fit1)
attach(data)
# normality test for patient satisfaction (response)
shapiro.test(Satisfaction)
# apply transformation
boxcoxnc(Satisfaction)
# apply transformation
AID::boxcoxnc(Satisfaction)
# apply transformation
AID::boxcoxnc(Satisfaction)
fit1 <- lm(Satisfaction ^ 0.42 ~ ., data)
summary(fit1)
fit1 <- lm(Satisfaction ~ ., data)
summary(fit1)
effectsize::standardize_parameters(fit1)
summary(fit1)
fit1 <- lm(Satisfaction ^ 0.42 ~ ., data)
summary(fit1)
effectsize::standardize_parameters(fit1)
fit1 <- lm(Satisfaction ^ 0.42 ~ ., data)
summary(fit1)
effectsize::standardize_parameters(fit1)
fit1 <- lm(Satisfaction ~ ., data)
summary(fit1)
effectsize::standardize_parameters(fit1)
plot(fit1)
library(MASS)
library(AID)
library(effectsize)
data1   <-read.csv("dataset3.csv")
setwd("~/Desktop/STAT250PROJECT/dataset3")
data1   <-read.csv("dataset3.csv")
#changing the structure of the variables
data1$gender <- as.factor(data1$gender)
data1$surgical <- as.factor(data1$surgical)
attach(data1)
model <- lm(Satisfaction ~ ., data=data1)
summary(model)
plot(model)
shapiro.test(Satisfaction)#Normality failed
boxcox(model) #saw that we need to take square root since our lambda is 0.5
boxcoxnc(Satisfaction) #to find the best normal data we found lambda as 0.42
boxcoxnc(Satisfaction) #to find the best normal data we found lambda as 0.42
model <- lm(Satisfaction ~ ., data=data1)
summary(model)
plot(model)
shapiro.test(Satisfaction)#Normality failed
boxcox(model) #saw that we need to take square root since our lambda is 0.5
boxcoxnc(Satisfaction) #to find the best normal data we found lambda as 0.42
#then we check the square root of the model for normality
shapiro.test(Satisfaction^0.42)
hist(Satisfaction)
hist(Satisfaction ^ 0.42)
boxcoxnc(Satisfaction) #to find the best normal data we found lambda as 0.42
boxcox(model) #saw that we need to take square root since our lambda is 0.5
boxcoxnc(Satisfaction) #to find the best normal data we found lambda as 0.42
modeltrans <- lm(Satisfaction^0.42 ~., data = data1)
summary(modeltrans)
hist(Satisfaction ^ 0.42)
hist(Satisfaction ^ 0.5)
par(mfrow= c(1,1))
hist(Satisfaction ^ 0.5)
boxcoxnc(Satisfaction) #to find the best normal data we found lambda as 0.42
plot(modeltrans)
modeltrans <- lm(Satisfaction^0.52 ~., data = data1)
summary(modeltrans)
par(mfrow= c(2,2))
plot(modeltrans)
modeltrans <- lm(Satisfaction^0.5 ~., data = data1)
summary(modeltrans)
par(mfrow= c(2,2))
plot(modeltrans)
modeltrans <- lm(Satisfaction^0.49 ~., data = data1)
summary(modeltrans)
par(mfrow= c(2,2))
plot(modeltrans)
hist(Satisfaction ^ 0.49)
hist(Satisfaction ^ 0.50)
modeltrans <- lm(Satisfaction^0.5 ~., data = data1)
summary(modeltrans)
hist(Satisfaction ^ 0.50)
#multicollinearty yok
DAAG::vif(modeltrans)
library(DAAG)
standardize_parameters(modeltrans)
female <- data1[data1$gender==0,]
male <- data1[data1$gender==1,]
length(male[,1])
var.test(female$Satisfaction, male$Satisfaction)#do not reject ??k?yor ama normality kontrol etmek gerek
#normality check
shapiro.test(female$Satisfaction)
shapiro.test(male$Satisfaction)
#normality check after transformation
shapiro.test(sqrt(female$Satisfaction))
shapiro.test(sqrt(male$Satisfaction))
#transformation
var.test(sqrt(female$Satisfaction), sqrt(male$Satisfaction))
t.test(sqrt(female$Satisfaction), sqrt(male$Satisfaction), var.equal = TRUE)
#Q3
slr <-lm(anxiety ~ Age)
summary(slr)
plot(slr)
boxcox(slr)
boxcoxnc(anxiety)
shapiro.test(log(anxiety))
model4 <- lm(Satisfaction~day+surgical)
summary(model4)
shapiro.test(Satisfaction)
shapiro.test(Satisfaction)
shapiro.test(Satisfaction^0.42)
boxcoxnc(Satisfaction)
#transformation
model4 <- lm(Satisfaction^0.42~day+surgical)
summary(model3)
summary(model4)
#transformation
model4 <- lm(Satisfaction^0.42~day+surgical)
summary(model4)
shapiro.test(Satisfaction^0.42)
plot(model4)
shapiro.test(Satisfaction^0.42)
summary(model4)
model5 <- lm(anxiety ~ surgical)
summary(model5)
model5 <- lm(Satisfaction ~ surgical)
summary(model5)
#Q3
slr <-lm(Satisfaction ~ Age)
summary(slr)
plot(slr)
